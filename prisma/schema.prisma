// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(uuid())
  name                String
  role                UserRole        @default(CUSTOMER)
  email               String          @unique
  password            String
  status              UserStatus      @default(ACTIVE)
  User_Extension      User_Extension?
  forgotPasswordToken String?
  couponUsages        CouponUsage[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  Order               Order[]
  Cart                Cart[]
  Favorite            Favorite[]
  Review              Review[]

  @@map("user")
}

model User_Extension {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  role       UserRole @default(CUSTOMER)
  email      String   @unique
  imageUrl   String?
  phone      String?
  address    String?
  bio        String?
  country    String?
  postalCode String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("user_extensions")
}

model Coupon {
  id           String       @id @default(uuid())
  code         String       @unique
  discountType DiscountType
  value        Float
  maxUsage     Int?
  expiresAt    DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  couponUsages CouponUsage[]

  @@map("coupons")
}

model CouponUsage {
  id       String   @id @default(uuid())
  userId   String
  couponId String
  usedAt   DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  coupon Coupon @relation(fields: [couponId], references: [id])

  @@unique([userId, couponId]) // Prevents same user using coupon more than once
  @@map("coupon_usages")
}

model Brand {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  logoUrl     String?
  products    Product[]
  isFeatured  Boolean   @default(false)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("brands")
}

model Category {
  id       String     @id @default(uuid())
  name     String
  slug     String?
  parentId String?
  parent   Category?  @relation("SubCategory", fields: [parentId], references: [id])
  children Category[] @relation("SubCategory")
  Products Product[]

  @@map("categories")
}

model Product {
  id             String      @id @default(uuid())
  name           String
  sku            String      @unique
  discountPrice  Int
  description    String
  price          Float
  stock          Int
  stockStatus    Boolean
  brandId        String
  purchasedPrice Float
  specification  Json[]
  isFeatured     Boolean     @default(false)
  images         String[]
  categoryId     String
  seoInformation Json[]
  variants       String[]
  isDeleted      Boolean
  brand          Brand       @relation(fields: [brandId], references: [id])
  category       Category    @relation(fields: [categoryId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  OrderItem      OrderItem[]
  CartItem       CartItem[]
  Favorite       Favorite[]
  Review         Review[]

  @@map("products")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  totalAmount   Float
  totalProduct  Int
  status        OrderStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orderItems    OrderItem[]
  shippingId    String
  shippingFee   Int
  paymentStatus PaymentStatus @default(UNPAID)
  Payment       Payment[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String
  method        String
  amount        Float
  status        PaymentStatus
  transactionId String?
  paidAt        DateTime?
  order         Order         @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Newsletter {
  id           String   @id @default(uuid())
  email        String   @unique
  subscribedAt DateTime @default(now())

  @@map("newsletter")
}

model Favorite {
  id        String  @id @default(uuid())
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("favorites")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("reviews")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  UNPAID
  PAID
  FAILED
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}
